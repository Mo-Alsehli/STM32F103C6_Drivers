
;; Function clockInit (clockInit, funcdef_no=0, decl_uid=4821, cgraph_uid=0, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can't eliminate 103 to 13 (offset=4, prev_offset=0)
Can't eliminate 103 to 102 (offset=4, prev_offset=0)
Can't eliminate 103 to 11 (offset=4, prev_offset=0)
Can eliminate 103 to 7 (offset=4, prev_offset=0)
Can't eliminate 102 to 13 (offset=0, prev_offset=0)
Can't eliminate 102 to 11 (offset=0, prev_offset=0)
Can eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) l  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) l  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) l  (1) mi {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 8:  (0) =r  (1) %r  (2) I {*iorsi3_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=21,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=6,overall=22,losers=2 -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 9:  (0) m  (1) l {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) l  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) l  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) l  (1) mi {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =r  (1) %r  (2) I {*iorsi3_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=21,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=6,overall=22,losers=2 -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 14:  (0) m  (1) l {*thumb2_movsi_insn}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = 7
   Insn 13: point = 1, n_alt = 0
   Insn 12: point = 3, n_alt = 5
   Insn 11: point = 4, n_alt = 5
   Insn 10: point = 6, n_alt = 5
   Insn 9: point = 7, n_alt = 7
   Insn 8: point = 8, n_alt = 0
   Insn 7: point = 10, n_alt = 5
   Insn 6: point = 11, n_alt = 5
   Insn 5: point = 13, n_alt = 5
 r110: [12..13]
 r111: [9..11]
 r112: [7..10]
 r113: [7..8]
 r114: [5..6]
 r115: [2..4]
 r116: [0..3]
 r117: [0..1]
Compressing live ranges: from 14 to 12 - 85%
Ranges after the compression:
 r110: [10..11]
 r111: [8..9]
 r112: [6..9]
 r113: [6..7]
 r114: [4..5]
 r115: [2..3]
 r116: [0..3]
 r117: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can't eliminate 103 to 13 (offset=4, prev_offset=0)
Can't eliminate 103 to 102 (offset=4, prev_offset=0)
Can't eliminate 103 to 11 (offset=4, prev_offset=0)
Can eliminate 103 to 7 (offset=4, prev_offset=4)
Can't eliminate 102 to 13 (offset=0, prev_offset=0)
Can't eliminate 102 to 11 (offset=0, prev_offset=0)
Can eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 5
changing reg in insn 6
changing reg in insn 6
changing reg in insn 8
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 13
changing reg in insn 12
changing reg in insn 14
changing reg in insn 13
changing reg in insn 14
starting the processing of deferred insns
ending the processing of deferred insns


clockInit

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [r7] 13 [sp]
;;  eh block artificial uses 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 7 [r7] 13 [sp] 102 [sfp]
;;  regs ever live 	 2 [r2] 3 [r3] 7 [r7]
;;  ref usage 	r0={1d} r1={1d} r2={3d,2u} r3={7d,6u} r7={1d,2u} r12={1d} r13={1d,2u} r14={1d} r102={1d,1u} 
;;    total ref usage 30{17d,13u,0e} in 11{11 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 110 111 112 113 114 115 116 117
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 3 r3 [orig:110 _1 ] [110])
        (const_int 1073876992 [0x40021000])) "../Src/main.c":16 878 {*thumb2_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 3 r3 [orig:111 _2 ] [111])
        (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:110 _1 ] [110])
                (const_int 24 [0x18])) [2 _1->APB2ENR+0 S4 A32])) "../Src/main.c":16 878 {*thumb2_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 2 r2 [orig:112 _3 ] [112])
        (const_int 1073876992 [0x40021000])) "../Src/main.c":16 878 {*thumb2_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 3 r3 [orig:113 _4 ] [113])
        (ior:SI (reg:SI 3 r3 [orig:111 _2 ] [111])
            (const_int 4 [0x4]))) "../Src/main.c":16 105 {*iorsi3_insn}
     (nil))
(insn 9 8 10 2 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [orig:112 _3 ] [112])
                (const_int 24 [0x18])) [2 _3->APB2ENR+0 S4 A32])
        (reg:SI 3 r3 [orig:113 _4 ] [113])) "../Src/main.c":16 878 {*thumb2_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 3 r3 [orig:114 _5 ] [114])
        (const_int 1073876992 [0x40021000])) "../Src/main.c":17 878 {*thumb2_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 3 r3 [orig:115 _6 ] [115])
        (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:114 _5 ] [114])
                (const_int 24 [0x18])) [2 _5->APB2ENR+0 S4 A32])) "../Src/main.c":17 878 {*thumb2_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg/f:SI 2 r2 [orig:116 _7 ] [116])
        (const_int 1073876992 [0x40021000])) "../Src/main.c":17 878 {*thumb2_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg:SI 3 r3 [orig:117 _8 ] [117])
        (ior:SI (reg:SI 3 r3 [orig:115 _6 ] [115])
            (const_int 8 [0x8]))) "../Src/main.c":17 105 {*iorsi3_insn}
     (nil))
(insn 14 13 17 2 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [orig:116 _7 ] [116])
                (const_int 24 [0x18])) [2 _7->APB2ENR+0 S4 A32])
        (reg:SI 3 r3 [orig:117 _8 ] [117])) "../Src/main.c":17 878 {*thumb2_movsi_insn}
     (nil))
(insn 17 14 22 2 (const_int 0 [0]) "../Src/main.c":18 236 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

(note 22 17 0 NOTE_INSN_DELETED)

;; Function gpioInit (gpioInit, funcdef_no=1, decl_uid=4823, cgraph_uid=1, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can't eliminate 103 to 13 (offset=16, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can't eliminate 103 to 11 (offset=8, prev_offset=0)
Can eliminate 103 to 7 (offset=16, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can't eliminate 102 to 11 (offset=0, prev_offset=0)
Can eliminate 102 to 7 (offset=8, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) r  (1) I {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) rk {*thumb2_movhi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) m  (1) r {*thumb2_movhi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) I {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=21,losers=2,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 10:  (0) Uu  (1) l {*arm_movqi_insn}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=19,losers=2,rld_nregs=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            alt=2,overall=10,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=9,losers=1 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=9,losers=1 -- refuse
            alt=14: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 3 in insn 11:  (0) l  (1) l  (2) Pd {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) l  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) I {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) rk {*thumb2_movhi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) m  (1) r {*thumb2_movhi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) I {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=21,losers=2,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 20:  (0) Uu  (1) l {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) I {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=21,losers=2,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 23:  (0) Uu  (1) l {*arm_movqi_insn}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=19,losers=2,rld_nregs=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            alt=2,overall=10,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=9,losers=1 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=9,losers=1 -- refuse
            alt=14: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 3 in insn 24:  (0) l  (1) l  (2) Pd {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) l  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) I {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) rk {*thumb2_movhi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) m  (1) r {*thumb2_movhi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) I {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=21,losers=2,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 33:  (0) Uu  (1) l {*arm_movqi_insn}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=19,losers=2,rld_nregs=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            alt=2,overall=10,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=9,losers=1 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=9,losers=1 -- refuse
            alt=14: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 3 in insn 34:  (0) l  (1) l  (2) Pd {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) l  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) I {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) rk {*thumb2_movhi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) m  (1) r {*thumb2_movhi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) I {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=21,losers=2,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 43:  (0) Uu  (1) l {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) I {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=21,losers=2,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 46:  (0) Uu  (1) l {*arm_movqi_insn}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=19,losers=2,rld_nregs=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            alt=2,overall=10,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=9,losers=1 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=9,losers=1 -- refuse
            alt=14: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 3 in insn 47:  (0) l  (1) l  (2) Pd {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 49:  (0) l  (1) mi {*thumb2_movsi_insn}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 53: point = 0, n_alt = -1
   Insn 50: point = 0, n_alt = -1
   Insn 49: point = 0, n_alt = 5
   Insn 48: point = 0, n_alt = -2
   Insn 47: point = 1, n_alt = 3
   Insn 46: point = 2, n_alt = 6
   Insn 45: point = 3, n_alt = 0
   Insn 44: point = 5, n_alt = 1
   Insn 43: point = 6, n_alt = 6
   Insn 42: point = 7, n_alt = 0
   Insn 41: point = 9, n_alt = 1
   Insn 40: point = 10, n_alt = 4
   Insn 39: point = 11, n_alt = 0
   Insn 38: point = 13, n_alt = 1
   Insn 37: point = 14, n_alt = -1
   Insn 36: point = 14, n_alt = 5
   Insn 35: point = 14, n_alt = -2
   Insn 34: point = 15, n_alt = 3
   Insn 33: point = 16, n_alt = 6
   Insn 32: point = 17, n_alt = 0
   Insn 31: point = 19, n_alt = 1
   Insn 30: point = 20, n_alt = 4
   Insn 29: point = 21, n_alt = 0
   Insn 28: point = 23, n_alt = 1
   Insn 27: point = 24, n_alt = -1
   Insn 26: point = 24, n_alt = 5
   Insn 25: point = 24, n_alt = -2
   Insn 24: point = 25, n_alt = 3
   Insn 23: point = 26, n_alt = 6
   Insn 22: point = 27, n_alt = 0
   Insn 21: point = 29, n_alt = 1
   Insn 20: point = 30, n_alt = 6
   Insn 19: point = 31, n_alt = 0
   Insn 18: point = 33, n_alt = 1
   Insn 17: point = 34, n_alt = 4
   Insn 16: point = 35, n_alt = 0
   Insn 15: point = 37, n_alt = 1
   Insn 14: point = 38, n_alt = -1
   Insn 13: point = 38, n_alt = 5
   Insn 12: point = 38, n_alt = -2
   Insn 11: point = 39, n_alt = 3
   Insn 10: point = 40, n_alt = 6
   Insn 9: point = 41, n_alt = 0
   Insn 8: point = 43, n_alt = 1
   Insn 7: point = 44, n_alt = 4
   Insn 6: point = 45, n_alt = 0
   Insn 5: point = 47, n_alt = 1
 r110: [44..45]
 r111: [46..47]
 r112: [42..43]
 r113: [40..41]
 r114: [38..39]
 r115: [34..35]
 r116: [36..37]
 r117: [32..33]
 r118: [30..31]
 r119: [28..29]
 r120: [26..27]
 r121: [24..25]
 r122: [20..21]
 r123: [22..23]
 r124: [18..19]
 r125: [16..17]
 r126: [14..15]
 r127: [10..11]
 r128: [12..13]
 r129: [8..9]
 r130: [6..7]
 r131: [4..5]
 r132: [2..3]
 r133: [0..1]
Compressing live ranges: from 48 to 48 - 100%
Ranges after the compression:
 r110: [44..45]
 r111: [46..47]
 r112: [42..43]
 r113: [40..41]
 r114: [38..39]
 r115: [34..35]
 r116: [36..37]
 r117: [32..33]
 r118: [30..31]
 r119: [28..29]
 r120: [26..27]
 r121: [24..25]
 r122: [20..21]
 r123: [22..23]
 r124: [18..19]
 r125: [16..17]
 r126: [14..15]
 r127: [10..11]
 r128: [12..13]
 r129: [8..9]
 r130: [6..7]
 r131: [4..5]
 r132: [2..3]
 r133: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can't eliminate 103 to 13 (offset=16, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can't eliminate 103 to 11 (offset=8, prev_offset=0)
Can eliminate 103 to 7 (offset=16, prev_offset=16)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can't eliminate 102 to 11 (offset=0, prev_offset=0)
Can eliminate 102 to 7 (offset=8, prev_offset=8)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 5
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 38
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 50.


gpioInit

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [r7] 13 [sp]
;;  eh block artificial uses 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 7 [r7] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={9d,4u} r1={9d,4u} r2={5d} r3={29d,24u} r7={1d,16u} r12={9d} r13={1d,6u} r14={5d} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={1d,1u} 
;;    total ref usage 472{417d,55u,0e} in 47{43 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 3 r3 [111])
        (const_int 2 [0x2])) "../Src/main.c":24 878 {*thumb2_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:HI 3 r3 [110])
        (reg:HI 3 r3 [111])) "../Src/main.c":24 880 {*thumb2_movhi_insn}
     (expr_list:REG_EQUAL (const_int 2 [0x2])
        (nil)))
(insn 7 6 8 2 (set (mem/c:HI (plus:SI (reg/f:SI 7 r7)
                (const_int 4 [0x4])) [5 pinCfg.GPIO_PinNumber+0 S2 A32])
        (reg:HI 3 r3 [110])) "../Src/main.c":24 880 {*thumb2_movhi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 3 r3 [112])
        (const_int 2 [0x2])) "../Src/main.c":25 878 {*thumb2_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:QI 3 r3 [113])
        (reg:QI 3 r3 [112])) "../Src/main.c":25 192 {*arm_movqi_insn}
     (nil))
(insn 10 9 11 2 (set (mem/c:QI (plus:SI (reg/f:SI 7 r7)
                (const_int 6 [0x6])) [0 pinCfg.GPIO_MODE+0 S1 A16])
        (reg:QI 3 r3 [113])) "../Src/main.c":25 192 {*arm_movqi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 3 r3 [114])
        (plus:SI (reg/f:SI 7 r7)
            (const_int 4 [0x4]))) "../Src/main.c":27 4 {*arm_addsi3}
     (nil))
(insn 12 11 13 2 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [114])) "../Src/main.c":27 878 {*thumb2_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg:SI 0 r0)
        (const_int 1073809408 [0x40010800])) "../Src/main.c":27 878 {*thumb2_movsi_insn}
     (nil))
(call_insn 14 13 15 2 (parallel [
            (call (mem:SI (symbol_ref:SI ("MCAL_GPIO_Init") [flags 0x41]  <function_decl 0000000005a0a400 MCAL_GPIO_Init>) [0 MCAL_GPIO_Init S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../Src/main.c":27 219 {*call_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 15 14 16 2 (set (reg:SI 3 r3 [116])
        (const_int 2 [0x2])) "../Src/main.c":30 878 {*thumb2_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg:HI 3 r3 [115])
        (reg:HI 3 r3 [116])) "../Src/main.c":30 880 {*thumb2_movhi_insn}
     (expr_list:REG_EQUAL (const_int 2 [0x2])
        (nil)))
(insn 17 16 18 2 (set (mem/c:HI (plus:SI (reg/f:SI 7 r7)
                (const_int 4 [0x4])) [5 pinCfg.GPIO_PinNumber+0 S2 A32])
        (reg:HI 3 r3 [115])) "../Src/main.c":30 880 {*thumb2_movhi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 3 r3 [117])
        (const_int 4 [0x4])) "../Src/main.c":31 878 {*thumb2_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg:QI 3 r3 [118])
        (reg:QI 3 r3 [117])) "../Src/main.c":31 192 {*arm_movqi_insn}
     (nil))
(insn 20 19 21 2 (set (mem/c:QI (plus:SI (reg/f:SI 7 r7)
                (const_int 6 [0x6])) [0 pinCfg.GPIO_MODE+0 S1 A16])
        (reg:QI 3 r3 [118])) "../Src/main.c":31 192 {*arm_movqi_insn}
     (nil))
(insn 21 20 22 2 (set (reg:SI 3 r3 [119])
        (const_int 1 [0x1])) "../Src/main.c":32 878 {*thumb2_movsi_insn}
     (nil))
(insn 22 21 23 2 (set (reg:QI 3 r3 [120])
        (reg:QI 3 r3 [119])) "../Src/main.c":32 192 {*arm_movqi_insn}
     (nil))
(insn 23 22 24 2 (set (mem/c:QI (plus:SI (reg/f:SI 7 r7)
                (const_int 7 [0x7])) [0 pinCfg.GPIO_OUTPUT_SPEED+0 S1 A8])
        (reg:QI 3 r3 [120])) "../Src/main.c":32 192 {*arm_movqi_insn}
     (nil))
(insn 24 23 25 2 (set (reg:SI 3 r3 [121])
        (plus:SI (reg/f:SI 7 r7)
            (const_int 4 [0x4]))) "../Src/main.c":34 4 {*arm_addsi3}
     (nil))
(insn 25 24 26 2 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [121])) "../Src/main.c":34 878 {*thumb2_movsi_insn}
     (nil))
(insn 26 25 27 2 (set (reg:SI 0 r0)
        (const_int 1073810432 [0x40010c00])) "../Src/main.c":34 878 {*thumb2_movsi_insn}
     (nil))
(call_insn 27 26 28 2 (parallel [
            (call (mem:SI (symbol_ref:SI ("MCAL_GPIO_Init") [flags 0x41]  <function_decl 0000000005a0a400 MCAL_GPIO_Init>) [0 MCAL_GPIO_Init S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../Src/main.c":34 219 {*call_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 28 27 29 2 (set (reg:SI 3 r3 [123])
        (const_int 8192 [0x2000])) "../Src/main.c":37 878 {*thumb2_movsi_insn}
     (nil))
(insn 29 28 30 2 (set (reg:HI 3 r3 [122])
        (reg:HI 3 r3 [123])) "../Src/main.c":37 880 {*thumb2_movhi_insn}
     (expr_list:REG_EQUAL (const_int 8192 [0x2000])
        (nil)))
(insn 30 29 31 2 (set (mem/c:HI (plus:SI (reg/f:SI 7 r7)
                (const_int 4 [0x4])) [5 pinCfg.GPIO_PinNumber+0 S2 A32])
        (reg:HI 3 r3 [122])) "../Src/main.c":37 880 {*thumb2_movhi_insn}
     (nil))
(insn 31 30 32 2 (set (reg:SI 3 r3 [124])
        (const_int 3 [0x3])) "../Src/main.c":38 878 {*thumb2_movsi_insn}
     (nil))
(insn 32 31 33 2 (set (reg:QI 3 r3 [125])
        (reg:QI 3 r3 [124])) "../Src/main.c":38 192 {*arm_movqi_insn}
     (nil))
(insn 33 32 34 2 (set (mem/c:QI (plus:SI (reg/f:SI 7 r7)
                (const_int 6 [0x6])) [0 pinCfg.GPIO_MODE+0 S1 A16])
        (reg:QI 3 r3 [125])) "../Src/main.c":38 192 {*arm_movqi_insn}
     (nil))
(insn 34 33 35 2 (set (reg:SI 3 r3 [126])
        (plus:SI (reg/f:SI 7 r7)
            (const_int 4 [0x4]))) "../Src/main.c":40 4 {*arm_addsi3}
     (nil))
(insn 35 34 36 2 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [126])) "../Src/main.c":40 878 {*thumb2_movsi_insn}
     (nil))
(insn 36 35 37 2 (set (reg:SI 0 r0)
        (const_int 1073809408 [0x40010800])) "../Src/main.c":40 878 {*thumb2_movsi_insn}
     (nil))
(call_insn 37 36 38 2 (parallel [
            (call (mem:SI (symbol_ref:SI ("MCAL_GPIO_Init") [flags 0x41]  <function_decl 0000000005a0a400 MCAL_GPIO_Init>) [0 MCAL_GPIO_Init S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../Src/main.c":40 219 {*call_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 38 37 39 2 (set (reg:SI 3 r3 [128])
        (const_int 8192 [0x2000])) "../Src/main.c":43 878 {*thumb2_movsi_insn}
     (nil))
(insn 39 38 40 2 (set (reg:HI 3 r3 [127])
        (reg:HI 3 r3 [128])) "../Src/main.c":43 880 {*thumb2_movhi_insn}
     (expr_list:REG_EQUAL (const_int 8192 [0x2000])
        (nil)))
(insn 40 39 41 2 (set (mem/c:HI (plus:SI (reg/f:SI 7 r7)
                (const_int 4 [0x4])) [5 pinCfg.GPIO_PinNumber+0 S2 A32])
        (reg:HI 3 r3 [127])) "../Src/main.c":43 880 {*thumb2_movhi_insn}
     (nil))
(insn 41 40 42 2 (set (reg:SI 3 r3 [129])
        (const_int 4 [0x4])) "../Src/main.c":44 878 {*thumb2_movsi_insn}
     (nil))
(insn 42 41 43 2 (set (reg:QI 3 r3 [130])
        (reg:QI 3 r3 [129])) "../Src/main.c":44 192 {*arm_movqi_insn}
     (nil))
(insn 43 42 44 2 (set (mem/c:QI (plus:SI (reg/f:SI 7 r7)
                (const_int 6 [0x6])) [0 pinCfg.GPIO_MODE+0 S1 A16])
        (reg:QI 3 r3 [130])) "../Src/main.c":44 192 {*arm_movqi_insn}
     (nil))
(insn 44 43 45 2 (set (reg:SI 3 r3 [131])
        (const_int 1 [0x1])) "../Src/main.c":45 878 {*thumb2_movsi_insn}
     (nil))
(insn 45 44 46 2 (set (reg:QI 3 r3 [132])
        (reg:QI 3 r3 [131])) "../Src/main.c":45 192 {*arm_movqi_insn}
     (nil))
(insn 46 45 47 2 (set (mem/c:QI (plus:SI (reg/f:SI 7 r7)
                (const_int 7 [0x7])) [0 pinCfg.GPIO_OUTPUT_SPEED+0 S1 A8])
        (reg:QI 3 r3 [132])) "../Src/main.c":45 192 {*arm_movqi_insn}
     (nil))
(insn 47 46 48 2 (set (reg:SI 3 r3 [133])
        (plus:SI (reg/f:SI 7 r7)
            (const_int 4 [0x4]))) "../Src/main.c":47 4 {*arm_addsi3}
     (nil))
(insn 48 47 49 2 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [133])) "../Src/main.c":47 878 {*thumb2_movsi_insn}
     (nil))
(insn 49 48 50 2 (set (reg:SI 0 r0)
        (const_int 1073810432 [0x40010c00])) "../Src/main.c":47 878 {*thumb2_movsi_insn}
     (nil))
(call_insn 50 49 53 2 (parallel [
            (call (mem:SI (symbol_ref:SI ("MCAL_GPIO_Init") [flags 0x41]  <function_decl 0000000005a0a400 MCAL_GPIO_Init>) [0 MCAL_GPIO_Init S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../Src/main.c":47 219 {*call_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 53 50 58 2 (const_int 0 [0]) "../Src/main.c":48 236 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

(note 58 53 0 NOTE_INSN_DELETED)

;; Function wait (wait, funcdef_no=2, decl_uid=4827, cgraph_uid=2, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can't eliminate 103 to 13 (offset=24, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can't eliminate 103 to 11 (offset=4, prev_offset=0)
Can eliminate 103 to 7 (offset=24, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can't eliminate 102 to 11 (offset=-4, prev_offset=0)
Can eliminate 102 to 7 (offset=16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=23,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=6,overall=24,losers=2 -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 2:  (0) m  (1) l {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) I {*thumb2_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=21,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=6,overall=22,losers=2 -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 7:  (0) m  (1) l {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) I {*thumb2_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=21,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=6,overall=22,losers=2 -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 12:  (0) m  (1) l {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) l  (1) mi {*thumb2_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=9,losers=1 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=9,losers=1 -- refuse
            alt=14: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 2 in insn 17:  (0) l  (1) 0  (2) Py {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=21,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=6,overall=22,losers=2 -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 18:  (0) m  (1) l {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) l  (1) mi {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) l  (1) Py {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) l  (1) mi {*thumb2_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=9,losers=1 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=9,losers=1 -- refuse
            alt=14: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 2 in insn 27:  (0) l  (1) 0  (2) Py {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=5,overall=21,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=6,overall=22,losers=2 -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 28:  (0) m  (1) l {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 32:  (0) l  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 33:  (0) l  (1) mi {*thumb2_movsi_insn}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) r {*arm_cmpsi_insn}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 39: point = 0, n_alt = -1
  BB 7
   Insn 35: point = 0, n_alt = -1
   Insn 34: point = 0, n_alt = 1
   Insn 33: point = 1, n_alt = 5
   Insn 32: point = 2, n_alt = 5
  BB 2
   Insn 40: point = 3, n_alt = -1
   Insn 7: point = 3, n_alt = 7
   Insn 6: point = 4, n_alt = 1
   Insn 2: point = 5, n_alt = 7
  BB 6
   Insn 28: point = 5, n_alt = 7
   Insn 27: point = 6, n_alt = 2
   Insn 26: point = 8, n_alt = 5
  BB 5
   Insn 24: point = 9, n_alt = -1
   Insn 23: point = 9, n_alt = 0
   Insn 22: point = 10, n_alt = 5
  BB 3
   Insn 42: point = 11, n_alt = -1
   Insn 12: point = 11, n_alt = 7
   Insn 11: point = 12, n_alt = 1
  BB 4
   Insn 18: point = 13, n_alt = 7
   Insn 17: point = 14, n_alt = 2
   Insn 16: point = 16, n_alt = 5
 r110: [3..4]
 r111: [11..12]
 r112: [13..14]
 r113: [15..16]
 r114: [9..10]
 r115: [5..6]
 r116: [7..8]
 r117: [0..2]
 r118: [0..1]
Compressing live ranges: from 17 to 16 - 94%
Ranges after the compression:
 r110: [2..3]
 r111: [10..11]
 r112: [12..13]
 r113: [14..15]
 r114: [8..9]
 r115: [4..5]
 r116: [6..7]
 r117: [0..1]
 r118: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can't eliminate 103 to 13 (offset=24, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can't eliminate 103 to 11 (offset=4, prev_offset=0)
Can eliminate 103 to 7 (offset=24, prev_offset=24)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can't eliminate 102 to 11 (offset=-4, prev_offset=0)
Can eliminate 102 to 7 (offset=16, prev_offset=16)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
changing reg in insn 17
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
changing reg in insn 22
changing reg in insn 23
changing reg in insn 27
changing reg in insn 28
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 34
changing reg in insn 33
changing reg in insn 34
starting the processing of deferred insns
ending the processing of deferred insns


wait

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [r7] 13 [sp]
;;  eh block artificial uses 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 7 [r7] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 100 [cc]
;;  ref usage 	r0={1d,1u} r1={1d} r2={2d,1u} r3={9d,8u} r7={1d,18u} r12={1d} r13={1d,8u} r14={1d} r100={2d,2u} r102={1d,1u} 
;;    total ref usage 59{20d,39u,0e} in 21{21 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 0 [r0] 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 110
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 4 [0x4])) [2 time+0 S4 A32])
        (reg:SI 0 r0 [ time ])) "../Src/main.c":50 878 {*thumb2_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 3 r3 [110])
        (const_int 0 [0])) "../Src/main.c":52 878 {*thumb2_movsi_insn}
     (nil))
(insn 7 6 40 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 12 [0xc])) [2 i+0 S4 A32])
        (reg:SI 3 r3 [110])) "../Src/main.c":52 878 {*thumb2_movsi_insn}
     (nil))
(jump_insn 40 7 41 2 (set (pc)
        (label_ref 29)) "../Src/main.c":52 214 {*arm_jump}
     (nil)
 -> 29)
;;  succ:       7 [100.0%] 
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

(barrier 41 40 31)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 111
(code_label 31 41 10 3 11 (nil) [1 uses])
(note 10 31 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 3 r3 [111])
        (const_int 0 [0])) "../Src/main.c":53 878 {*thumb2_movsi_insn}
     (nil))
(insn 12 11 42 3 (set (mem/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 8 [0x8])) [2 j+0 S4 A32])
        (reg:SI 3 r3 [111])) "../Src/main.c":53 878 {*thumb2_movsi_insn}
     (nil))
(jump_insn 42 12 43 3 (set (pc)
        (label_ref 19)) "../Src/main.c":53 214 {*arm_jump}
     (nil)
 -> 19)
;;  succ:       5 [100.0%] 
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

(barrier 43 42 21)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 112 113
(code_label 21 43 15 4 10 (nil) [1 uses])
(note 15 21 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:SI 3 r3 [113])
        (mem/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 8 [0x8])) [2 j+0 S4 A32])) "../Src/main.c":53 878 {*thumb2_movsi_insn}
     (nil))
(insn 17 16 18 4 (set (reg:SI 3 r3 [112])
        (plus:SI (reg:SI 3 r3 [113])
            (const_int 1 [0x1]))) "../Src/main.c":53 4 {*arm_addsi3}
     (nil))
(insn 18 17 19 4 (set (mem/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 8 [0x8])) [2 j+0 S4 A32])
        (reg:SI 3 r3 [112])) "../Src/main.c":53 878 {*thumb2_movsi_insn}
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114
(code_label 19 18 20 5 9 (nil) [1 uses])
(note 20 19 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 22 20 23 5 (set (reg:SI 3 r3 [114])
        (mem/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 8 [0x8])) [2 j+0 S4 A32])) "../Src/main.c":53 878 {*thumb2_movsi_insn}
     (nil))
(insn 23 22 24 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [114])
            (const_int 254 [0xfe]))) "../Src/main.c":53 196 {*arm_cmpsi_insn}
     (nil))
(jump_insn 24 23 25 5 (set (pc)
        (if_then_else (leu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "../Src/main.c":53 204 {arm_cond_branch}
     (nil)
 -> 21)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 115 116
(note 25 24 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 6 (set (reg:SI 3 r3 [116])
        (mem/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 12 [0xc])) [2 i+0 S4 A32])) "../Src/main.c":52 878 {*thumb2_movsi_insn}
     (nil))
(insn 27 26 28 6 (set (reg:SI 3 r3 [115])
        (plus:SI (reg:SI 3 r3 [116])
            (const_int 1 [0x1]))) "../Src/main.c":52 4 {*arm_addsi3}
     (nil))
(insn 28 27 29 6 (set (mem/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 12 [0xc])) [2 i+0 S4 A32])
        (reg:SI 3 r3 [115])) "../Src/main.c":52 878 {*thumb2_movsi_insn}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 117 118
(code_label 29 28 30 7 8 (nil) [1 uses])
(note 30 29 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 32 30 33 7 (set (reg:SI 2 r2 [117])
        (mem/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 12 [0xc])) [2 i+0 S4 A32])) "../Src/main.c":52 878 {*thumb2_movsi_insn}
     (nil))
(insn 33 32 34 7 (set (reg:SI 3 r3 [118])
        (mem/c:SI (plus:SI (reg/f:SI 7 r7)
                (const_int 4 [0x4])) [2 time+0 S4 A32])) "../Src/main.c":52 878 {*thumb2_movsi_insn}
     (nil))
(insn 34 33 35 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 2 r2 [117])
            (reg:SI 3 r3 [118]))) "../Src/main.c":52 196 {*arm_cmpsi_insn}
     (nil))
(jump_insn 35 34 36 7 (set (pc)
        (if_then_else (ltu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "../Src/main.c":52 204 {arm_cond_branch}
     (nil)
 -> 31)
;;  succ:       3
;;              8 (FALLTHRU)
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 36 35 39 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 39 36 44 8 (const_int 0 [0]) "../Src/main.c":55 236 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

(note 44 39 0 NOTE_INSN_DELETED)

;; Function main (main, funcdef_no=3, decl_uid=4838, cgraph_uid=3, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can't eliminate 103 to 13 (offset=8, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can't eliminate 103 to 11 (offset=8, prev_offset=0)
Can eliminate 103 to 7 (offset=8, prev_offset=0)
Can't eliminate 102 to 13 (offset=0, prev_offset=0)
Can't eliminate 102 to 11 (offset=0, prev_offset=0)
Can eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) I {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) l  (1) mi {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) l  (1) Py {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) I {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) l  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) I {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) l  (1) mi {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) l  (1) Py {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) I {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 31:  (0) l  (1) mi {*thumb2_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) l  (1) Py {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) I {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) l  (1) mi {*thumb2_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) I {*thumb2_movsi_insn}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 9
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 5
   Insn 27: point = 0, n_alt = -1
   Insn 26: point = 0, n_alt = 0
   Insn 24: point = 1, n_alt = -2
   Insn 23: point = 3, n_alt = -2
   Insn 22: point = 4, n_alt = -1
   Insn 21: point = 4, n_alt = 5
   Insn 20: point = 4, n_alt = 1
  BB 9
   Insn 55: point = 4, n_alt = -1
  BB 4
   Insn 18: point = 4, n_alt = -1
   Insn 17: point = 4, n_alt = 5
   Insn 16: point = 4, n_alt = 1
  BB 3
   Insn 14: point = 4, n_alt = -1
   Insn 13: point = 4, n_alt = 0
   Insn 12: point = 5, n_alt = -2
   Insn 11: point = 7, n_alt = -2
   Insn 10: point = 8, n_alt = -1
   Insn 9: point = 8, n_alt = 5
   Insn 8: point = 8, n_alt = 1
  BB 8
   Insn 52: point = 8, n_alt = -1
   Insn 44: point = 8, n_alt = -1
   Insn 43: point = 8, n_alt = 1
  BB 7
   Insn 40: point = 8, n_alt = -1
   Insn 39: point = 8, n_alt = 5
   Insn 38: point = 8, n_alt = 1
  BB 6
   Insn 36: point = 8, n_alt = -1
   Insn 35: point = 8, n_alt = 0
   Insn 34: point = 9, n_alt = -2
   Insn 33: point = 11, n_alt = -2
   Insn 32: point = 12, n_alt = -1
   Insn 31: point = 12, n_alt = 5
   Insn 30: point = 12, n_alt = 1
  BB 2
   Insn 6: point = 12, n_alt = -1
   Insn 5: point = 12, n_alt = -1
 r110: [4..5]
 r111: [0..1]
 r112: [8..9]
 r114: [6..7]
 r115: [2..3]
 r116: [10..11]
Compressing live ranges: from 12 to 12 - 100%
Ranges after the compression:
 r110: [4..5]
 r111: [0..1]
 r112: [8..9]
 r114: [6..7]
 r115: [2..3]
 r116: [10..11]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can't eliminate 103 to 13 (offset=8, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can't eliminate 103 to 11 (offset=8, prev_offset=0)
Can eliminate 103 to 7 (offset=8, prev_offset=8)
Can't eliminate 102 to 13 (offset=0, prev_offset=0)
Can't eliminate 102 to 11 (offset=0, prev_offset=0)
Can eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 24
changing reg in insn 26
changing reg in insn 34
changing reg in insn 35
changing reg in insn 11
changing reg in insn 12
changing reg in insn 23
changing reg in insn 24
changing reg in insn 33
changing reg in insn 34
deleting insn with uid = 12.
deleting insn with uid = 24.
deleting insn with uid = 34.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 5.
verify found no changes in insn with uid = 6.
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 44.


main

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [r7] 13 [sp]
;;  eh block artificial uses 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 7 [r7] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={15d,10u} r1={14d,5u} r2={9d} r3={12d,3u} r7={1d,9u} r12={17d} r13={1d,17u} r14={9d} r15={8d} r16={8d} r17={8d} r18={8d} r19={8d} r20={8d} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r40={8d} r41={8d} r42={8d} r43={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} r81={8d} r82={8d} r83={8d} r84={8d} r85={8d} r86={8d} r87={8d} r88={8d} r89={8d} r90={8d} r91={8d} r92={8d} r93={8d} r94={8d} r95={8d} r96={8d} r97={8d} r98={8d} r99={8d} r100={11d,3u} r101={8d} r102={1d,1u} 
;;    total ref usage 826{778d,48u,0e} in 30{22 regular + 8 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc]
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 5 2 6 2 (parallel [
            (call (mem:SI (symbol_ref:SI ("clockInit") [flags 0x3]  <function_decl 0000000005a0ac00 clockInit>) [0 clockInit S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../Src/main.c":59 219 {*call_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(call_insn 6 5 45 2 (parallel [
            (call (mem:SI (symbol_ref:SI ("gpioInit") [flags 0x3]  <function_decl 0000000005a0ae00 gpioInit>) [0 gpioInit S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../Src/main.c":60 219 {*call_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              8 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 110 114
(code_label 45 6 7 3 16 (nil) [1 uses])
(note 7 45 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 8 7 9 3 (set (reg:SI 1 r1)
        (const_int 2 [0x2])) "../Src/main.c":64 878 {*thumb2_movsi_insn}
     (nil))
(insn 9 8 10 3 (set (reg:SI 0 r0)
        (const_int 1073809408 [0x40010800])) "../Src/main.c":64 878 {*thumb2_movsi_insn}
     (nil))
(call_insn 10 9 11 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("MCAL_GPIO_ReadPin") [flags 0x41]  <function_decl 0000000005a0a600 MCAL_GPIO_ReadPin>) [0 MCAL_GPIO_ReadPin S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../Src/main.c":64 220 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:HI (use (reg:SI 1 r1))
                (nil)))))
(insn 11 10 13 3 (set (reg:SI 3 r3 [114])
        (reg:SI 0 r0)) "../Src/main.c":64 878 {*thumb2_movsi_insn}
     (nil))
(insn 13 11 14 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:110 _1 ] [110])
            (const_int 1 [0x1]))) "../Src/main.c":64 196 {*arm_cmpsi_insn}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "../Src/main.c":64 204 {arm_cond_branch}
     (nil)
 -> 28)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 9, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc]
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:SI 1 r1)
        (const_int 2 [0x2])) "../Src/main.c":65 878 {*thumb2_movsi_insn}
     (nil))
(insn 17 16 18 4 (set (reg:SI 0 r0)
        (const_int 1073810432 [0x40010c00])) "../Src/main.c":65 878 {*thumb2_movsi_insn}
     (nil))
(call_insn 18 17 54 4 (parallel [
            (call (mem:SI (symbol_ref:SI ("MCAL_GPIO_TogglePin") [flags 0x41]  <function_decl 0000000005a0aa00 MCAL_GPIO_TogglePin>) [0 MCAL_GPIO_TogglePin S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../Src/main.c":65 219 {*call_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:HI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 5, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 54 18 55 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 25 9 (const_int 0 [0]) "../Src/main.c":66 236 {nop}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 6, flags: (RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU)
;;              5 (DFS_BACK)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 111 115
(code_label 25 55 19 5 14 (nil) [1 uses])
(note 19 25 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg:SI 1 r1)
        (const_int 2 [0x2])) "../Src/main.c":66 878 {*thumb2_movsi_insn}
     (nil))
(insn 21 20 22 5 (set (reg:SI 0 r0)
        (const_int 1073809408 [0x40010800])) "../Src/main.c":66 878 {*thumb2_movsi_insn}
     (nil))
(call_insn 22 21 23 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("MCAL_GPIO_ReadPin") [flags 0x41]  <function_decl 0000000005a0a600 MCAL_GPIO_ReadPin>) [0 MCAL_GPIO_ReadPin S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../Src/main.c":66 220 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:HI (use (reg:SI 1 r1))
                (nil)))))
(insn 23 22 26 5 (set (reg:SI 3 r3 [115])
        (reg:SI 0 r0)) "../Src/main.c":66 878 {*thumb2_movsi_insn}
     (nil))
(insn 26 23 27 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:111 _2 ] [111])
            (const_int 1 [0x1]))) "../Src/main.c":66 196 {*arm_cmpsi_insn}
     (nil))
(jump_insn 27 26 28 5 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "../Src/main.c":66 204 {arm_cond_branch}
     (nil)
 -> 25)
;;  succ:       5 (DFS_BACK)
;;              6 (FALLTHRU)
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       3
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 112 116
(code_label 28 27 29 6 13 (nil) [1 uses])
(note 29 28 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 6 (set (reg:SI 1 r1)
        (const_int 8192 [0x2000])) "../Src/main.c":69 878 {*thumb2_movsi_insn}
     (nil))
(insn 31 30 32 6 (set (reg:SI 0 r0)
        (const_int 1073809408 [0x40010800])) "../Src/main.c":69 878 {*thumb2_movsi_insn}
     (nil))
(call_insn 32 31 33 6 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("MCAL_GPIO_ReadPin") [flags 0x41]  <function_decl 0000000005a0a600 MCAL_GPIO_ReadPin>) [0 MCAL_GPIO_ReadPin S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../Src/main.c":69 220 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:HI (use (reg:SI 1 r1))
                (nil)))))
(insn 33 32 35 6 (set (reg:SI 3 r3 [116])
        (reg:SI 0 r0)) "../Src/main.c":69 878 {*thumb2_movsi_insn}
     (nil))
(insn 35 33 36 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:112 _3 ] [112])
            (const_int 1 [0x1]))) "../Src/main.c":69 196 {*arm_cmpsi_insn}
     (nil))
(jump_insn 36 35 37 6 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) "../Src/main.c":69 204 {arm_cond_branch}
     (nil)
 -> 41)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc]
(note 37 36 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 7 (set (reg:SI 1 r1)
        (const_int 8192 [0x2000])) "../Src/main.c":70 878 {*thumb2_movsi_insn}
     (nil))
(insn 39 38 40 7 (set (reg:SI 0 r0)
        (const_int 1073810432 [0x40010c00])) "../Src/main.c":70 878 {*thumb2_movsi_insn}
     (nil))
(call_insn 40 39 41 7 (parallel [
            (call (mem:SI (symbol_ref:SI ("MCAL_GPIO_TogglePin") [flags 0x41]  <function_decl 0000000005a0aa00 MCAL_GPIO_TogglePin>) [0 MCAL_GPIO_TogglePin S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../Src/main.c":70 219 {*call_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:HI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc]
(code_label 41 40 42 8 15 (nil) [1 uses])
(note 42 41 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 8 (set (reg:SI 0 r0)
        (const_int 1 [0x1])) "../Src/main.c":72 878 {*thumb2_movsi_insn}
     (nil))
(call_insn 44 43 52 8 (parallel [
            (call (mem:SI (symbol_ref:SI ("wait") [flags 0x3]  <function_decl 0000000005a14000 wait>) [0 wait S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "../Src/main.c":72 219 {*call_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 52 44 53 8 (set (pc)
        (label_ref 45)) "../Src/main.c":64 214 {*arm_jump}
     (nil)
 -> 45)
;;  succ:       3 [100.0%] 
;; lr  out 	 7 [r7] 13 [sp] 102 [sfp] 103 [afp]

(barrier 53 52 61)
(note 61 53 0 NOTE_INSN_DELETED)
